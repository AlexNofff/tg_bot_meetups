from datetime import datetime, timedelta
from typing import Optional

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram import Bot

from database import async_session, get_events_for_notification, mark_notification_sent

scheduler = AsyncIOScheduler()

async def send_event_notifications(bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö
    """
    async with async_session() as session:
        events = await get_events_for_notification(session)
        for event in events:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é —Å–æ–±—ã—Ç–∏—è
            creator_message = (
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
                f"–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ '{event.title}' –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.\n"
                f"–ú–µ—Å—Ç–æ: {event.location}\n"
                f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(event.participants)}"
            )
            try:
                await bot.send_message(event.creator.telegram_id, creator_message)
            except Exception as e:
                print(f"Error sending notification to creator: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            participant_message = (
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
                f"–°–æ–±—ã—Ç–∏–µ '{event.title}' –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.\n"
                f"–ú–µ—Å—Ç–æ: {event.location}"
            )
            for participant in event.participants:
                try:
                    await bot.send_message(participant.telegram_id, participant_message)
                except Exception as e:
                    print(f"Error sending notification to participant: {e}")

            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
            await mark_notification_sent(session, event)

async def send_events_digest(bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å–æ–±—ã—Ç–∏–π
    """
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —è–∑—ã–∫–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        result = await session.execute("SELECT DISTINCT telegram_id, language FROM users WHERE registration_complete = true")
        users = result.fetchall()

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è
        now = datetime.utcnow()
        next_week = now + timedelta(days=7)
        result = await session.execute(
            "SELECT * FROM events WHERE event_date BETWEEN :start AND :end AND is_active = true ORDER BY event_date",
            {"start": now, "end": next_week}
        )
        events = result.fetchall()

        if not events:
            return

        for user_id, language in users:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
            if language == "ru":
                message = "üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:\n\n"
            else:
                message = "üìÖ Upcoming events for the next week:\n\n"

            for event in events:
                event_date = event.event_date.strftime("%d.%m.%Y %H:%M")
                if language == "ru":
                    message += (
                        f"üéØ {event.title}\n"
                        f"üìç –ú–µ—Å—Ç–æ: {event.location}\n"
                        f"üïí –î–∞—Ç–∞: {event_date}\n"
                        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(event.participants)}"
                    )
                else:
                    message += (
                        f"üéØ {event.title}\n"
                        f"üìç Location: {event.location}\n"
                        f"üïí Date: {event_date}\n"
                        f"üë• Participants: {len(event.participants)}"
                    )
                
                if event.price:
                    if language == "ru":
                        message += f"\nüí∞ –¶–µ–Ω–∞: {event.price/100:.2f} —Ä—É–±."
                    else:
                        message += f"\nüí∞ Price: ${event.price/100:.2f}"
                
                message += "\n\n"

            try:
                await bot.send_message(user_id, message)
            except Exception as e:
                print(f"Error sending digest to user {user_id}: {e}")

def setup_scheduler(bot: Bot):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å
    scheduler.add_job(
        send_event_notifications,
        trigger=CronTrigger(hour='*'),
        args=[bot],
        id='event_notifications',
        replace_existing=True
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00
    scheduler.add_job(
        send_events_digest,
        trigger=CronTrigger(day_of_week='mon', hour=10),
        args=[bot],
        id='events_digest',
        replace_existing=True
    )

    scheduler.start() 